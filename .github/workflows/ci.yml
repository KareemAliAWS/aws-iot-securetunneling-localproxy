name: CI

on:
  push:
    branches:
      - '*'
      - '!master'

env:
  PACKAGE_NAME: aws-iot-securetunneling-localproxy

jobs:
#   osx:
#     runs-on: macos-latest
#     steps:
#     - name: Install brew dependencies
#       run: |
#         brew install openssl zlib cmake wget git
#     - uses: actions/checkout@v2
#       name: 'Checkout'
#     - name: install boost
#       working-directory: ${{ github.workspace }}
#       run: |
#         wget https://localproxy-binaries.s3-us-west-2.amazonaws.com/osx/boost_169.zip
#         unzip boost_169.zip -d boost_169 || :
#         cd boost_169
#         chmod +x b2
#         ./b2 install toolset=clang
#     - name: install protobuf
#       working-directory: ${{ github.workspace }}
#       run: |
#         wget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.tar.gz -O /tmp/protobuf-all-3.6.1.tar.gz
#         tar xzvf /tmp/protobuf-all-3.6.1.tar.gz
#         cd protobuf-3.6.1
#         mkdir build_make
#         cd build_make
#         cmake ../cmake
#         make
#         make install
#     - name: install Catch2
#       working-directory: ${{ github.workspace }}
#       run: |
#         git clone https://github.com/catchorg/Catch2.git
#         cd Catch2
#         mkdir build
#         cd build
#         cmake ../
#         make
#         make install
#     - name: Building ${{ env.PACKAGE_NAME }}
#       working-directory: ${{ github.workspace }}
#       run: |
#         mkdir build
#         cd build
#         cmake .. -DOPENSSL_ROOT_DIR=/usr/local/Cellar/openssl@1.1/1.1.1g/ -DOPENSSL_LIBRARIES=/usr/local/Cellar/openssl@1.1/1.1.1g/lib/
#         make
#   ubuntu:
#     runs-on: ubuntu-18.04
#     steps:
#     - name: Install apt-get dependencies
#       run: |
#         sudo apt-get install -y build-essential git python3-dev
#         sudo apt-get install -y wget tar zlibc libssl-dev openssl cmake python-dev
#         sudo apt-get clean -y
#     - uses: actions/checkout@v2
#       name: 'Checkout'
#     - name: install boost
#       working-directory: ${{ github.workspace }}
#       run: |
#         wget https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.gz -O /tmp/boost.tar.gz
#         tar xzvf /tmp/boost.tar.gz
#         cd boost_1_69_0
#         ./bootstrap.sh
#         sudo ./b2 install
#     - name: install protobuf
#       working-directory: ${{ github.workspace }}
#       run: |
#         wget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.tar.gz -O /tmp/protobuf-all-3.6.1.tar.gz
#         tar xzvf /tmp/protobuf-all-3.6.1.tar.gz
#         cd protobuf-3.6.1
#         mkdir build_make
#         cd build_make
#         cmake ../cmake
#         make
#         sudo make install
#     - name: install Catch2
#       working-directory: ${{ github.workspace }}
#       run: |
#         git clone https://github.com/catchorg/Catch2.git
#         cd Catch2
#         mkdir build
#         cd build
#         cmake ../
#         make
#         sudo make install
#     - name: Building ${{ env.PACKAGE_NAME }}
#       working-directory: ${{ github.workspace }}
#       run: |
#         mkdir build
#         cd build
#         cmake .. -DOPENSSL_ROOT_DIR=/usr/local/Cellar/openssl@1.1/1.1.1g/ -DOPENSSL_LIBRARIES=/usr/local/Cellar/openssl@1.1/1.1.1g/lib/
#         make
  windows:
    runs-on: windows-2019
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: 'Install OpenSSL'
        run: |
          Invoke-WebRequest "https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/win64/nasm-2.15.05-win64.zip" -OutFile "nasm-2.15.05-win64.zip"
          Expand-Archive "nasm-2.15.05-win64.zip" -Force -DestinationPath "C:\NASM"
          $env:Path += ";C:\NASM\nasm-2.15.05\"
          Invoke-WebRequest "https://localproxy-binaries.s3.us-west-2.amazonaws.com/windows/openssl.zip" -OutFile "openssl.zip"
          Expand-Archive "openssl.zip" -Force -DestinationPath "C:\openssl"
          ls 'C:\openssl'
          $env:Path += ";C:\openssl\bin"
      - name: 'Install Catch2'
        run: |
          git clone https://github.com/catchorg/Catch2.git
          cd Catch2
          mkdir build
          cd build
          cmake -DBUILD_TESTING=OFF -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release ../
          nmake
          nmake install
      - name: 'Install ZLIP'
        run: |
          git clone -b v1.2.8 https://github.com/madler/zlib.git
          cd zlib
          mkdir build
          cd build
          cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release ../
          nmake
          nmake install
          $env:Path += ";C:\Program Files (x86)\zlib\bin"
          ls "C:\Program Files\OpenSSL\bin"
      - name: "Install Boost"
        run: |
          Invoke-WebRequest "https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.zip" -OutFile "boost_1_69_0.zip"
          Expand-Archive "boost_1_69_0.zip" -Force
          cd .\boost_1_69_0\boost_1_69_0\
          .\bootstrap.bat
          .\b2 toolset=msvc address-model=64 define="BOOST_USE_WINAPI_VERSION=0x0A00" define="_BOOST_USE_WINAPI_VERSION=0x0A00" install
          Move-Item 'C:\Boost\include\boost-1_69\boost\' 'C:\Boost\include\'
          ls 'C:\Boost\'
          ls 'C:\Boost\include\'
          ls 'C:\Boost\include\boost'
      - name: 'Upload boost'
        uses: actions/upload-artifact@v1
        with:
          name: 'boost'
          path: 'C:\Boost'
      - name: "Install Protobuf"
        run: |
          Invoke-WebRequest "https://localproxy-binaries.s3.us-west-2.amazonaws.com/windows/protobuf.zip" -OutFile "protobuf.zip"
          Expand-Archive "protobuf.zip" -Force -DestinationPath "C:\protobuf"
          ls 'C:\protobuf\'
          $env:Path += ";C:\protobuf\bin"
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: "Build Local Proxy"
        working-directory: ${{ github.workspace }}
        run: |
          mkdir build
          cd build
          cmake -D_WIN32_WINNT="0x0A00" -DBOOST_USE_WINAPI_VERSION="0x0A00" -D_BOOST_USE_WINAPI_VERSION="0x0A00" -DBoost_USE_STATIC_LIBS=ON -DCMAKE_PREFIX_PATH="C:\Boost;C:\Program Files (x86)\Catch2;C:\protobuf;C:\openssl" -G "Visual Studio 16 2019" -A x64 ..\
          ls
          msbuild localproxy.vcxproj -p:Configuration=Release
